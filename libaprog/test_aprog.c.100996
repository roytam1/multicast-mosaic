/* test_aprog.c
 * Author: Gilles Dauphin
 * Version 2.7b4m9 [Sept96]
 *
 * Bug report :  dauphin@sig.enst.fr
 */

#include <stdio.h>
#include <Xm/XmP.h>
#include <Xm/DisplayP.h>
#include <Xm/PushBP.h>
#include <Xm/Protocols.h>
#include <Xm/PushB.h>
#include "aprog.h"

typedef struct {
        int supp_option;
}AppData, *AppDataPtr;

Widget		toplevel, button;
XtAppContext  	app;
Boolean		in_web = 0;
AppData 	res_data_instance;

#define offset(x) XtOffset (AppDataPtr, x)
static XtResource resources[] = {
        { "suppOption","suppOption",XtRInt,sizeof (int),
          offset (supp_option), XtRString, "0" }
};
#undef offset

XrmOptionDescRec options[] = {
	{"-suppOption",  ".suppOption",  XrmoptionSepArg,  "0"},
	APROG_OPTION_DESC_VALUES	/* Maaaaaagic Web */
};

void bcb(Widget w, XtPointer clid, XtPointer calld)
{
	if (in_web)
		printf("Hello: you are in WEB\n");
	else
		printf("Hello: you are on a simple Window Manager\n");
}

void printEvent( XEvent *ev);

void main( int argc, char *argv[])
{
	XmString 	  label;

	XtSetLanguageProc (NULL, NULL, NULL);
	toplevel = XtAppInitialize (&app, "Hello", options, XtNumber (options),
		&argc, argv, NULL, NULL,0);
	XtVaSetValues(toplevel,
		XtNinput, True,
		NULL);
	XtGetApplicationResources( toplevel, (XtPointer) &res_data_instance,
		resources, XtNumber (resources), NULL,0);
	
	in_web = AprogInitialize(toplevel);	/* Maaaaaagic Web */

	label = XmStringCreateLocalized("From test_aprog: Where are You?"); 
	button = XtVaCreateManagedWidget ("pushme",
		xmPushButtonWidgetClass, toplevel,
		XmNlabelString, label,
		NULL);
	XmStringFree (label);
	XtAddCallback (button, XmNactivateCallback, bcb, NULL);
	if(in_web){
		WebRealizeWidget(toplevel);
	} else {
		XtRealizeWidget (toplevel);
	}
	printf("Widget toplevel = %08x %d\n",toplevel,toplevel);
	printf("Window of Widget toplevel = %08x %d\n",toplevel->core.window,
					toplevel->core.window);
	{
                XEvent event;

                for (;;) {
                        XtAppNextEvent(app, &event);
                        printEvent(&event);
                        XtDispatchEvent(&event);
                }
        }

	XtAppMainLoop (app);

}

void printEvent( XEvent *ev)
{
	XEvent e = *ev;
	Widget bid;

	printf("#############################################\n");
	printf("	type = %08x\n",e.xany.type);
	printf("	send_event = %08x\n",e.xany.send_event);
	printf("	Display = %08x\n", e.xany.display);
	printf("XtDisplay(toplevel)=%08x\n",XtDisplay(toplevel));
	printf("	Window = %08x\n",e.xany.window);
	printf(" Widget toplevel= %08x\n", toplevel);
	bid = XtWindowToWidget(e.xany.display, e.xany.window);
	printf("XtWindowtoWidget=%08x\n", bid);

	switch(e.type){
	case ButtonPress:
		printf("recoit l'evenement ButtonPress\n");
		printf("	subwindow = %d\n",e.xbutton.subwindow);
		break;
	case ButtonRelease:
		printf("recoit l'evenement ButtonRelease\n");
		printf("	subwindow = %d\n",e.xbutton.subwindow);
		break;
	case MotionNotify:
		printf("recoit l'evenement MotionNotify\n");
		printf("	subwindow = %d\n",e.xbutton.subwindow);
		break;
	case KeyPress:
		printf("recoit l'evenement KeyPress\n");
		break;
	case KeyRelease:
		printf("recoit l'evenement KeyRelease\n");
		break;
	case EnterNotify:
		printf("recoit l'evenement EnterNotify\n");
		break;
	case LeaveNotify:
		printf("recoit l'evenement LeaveNotify\n");
		break;
	case FocusIn:
		printf("recoit l'evenement FocusIn\n");
		break;
	case FocusOut:
		printf("recoit l'evenement FocusOut\n");
		break;
	case KeymapNotify:
		printf("recoit l'evenement KeymapNotify\n");
		break;
	case Expose:
		printf("recoit l'evenement Expose\n");
		break;
	case GraphicsExpose:
		printf("recoit l'evenement GraphicsExpose\n");
		break;
	case NoExpose:
		printf("recoit l'evenement NoExpose\n");
		break;
	case ConfigureNotify:
		printf("recoit l'evenement ConfigureNotify\n");
		break;
	case CirculateNotify:
		printf("recoit l'evenement CirculateNotify\n");
		break;
	case CreateNotify:
		printf("recoit l'evenement CreateNotify\n");
		break;
	case DestroyNotify:
		printf("recoit l'evenement DestroyNotify\n");
		printf(" Window event = %08x\n",e.xdestroywindow.event);
		printf(" Window window = %08x\n",e.xdestroywindow.window);
		break;
	case GravityNotify:
		printf("recoit l'evenement GravityNotify\n");
		break;
	case MapNotify:
		printf("recoit l'evenement MapNotify\n");
		break;
	case MappingNotify:
		printf("recoit l'evenement MappingNotify\n");
		break;
	case ReparentNotify:
		printf("recoit l'evenement ReparentNotify\n");
		break;
	case UnmapNotify:
		printf("recoit l'evenement UnmapNotify\n");
		break;
	case VisibilityNotify:
		printf("recoit l'evenement VisibilityNotify\n");
		break;
	case ClientMessage:
		printf("recoit l'evenement ClientMessage\n");
		printf("	message_type=%08x\n",e.xclient.message_type);
		break;
	case PropertyNotify:
		printf("recoit l'evenement PropertyNotify\n");
		break;
	case SelectionClear:
		printf("recoit l'evenement SelectionClear\n");
		break;
	case SelectionNotify:
		printf("recoit l'evenement SelectionNotify\n");
		break;
	case SelectionRequest:
		printf("recoit l'evenement SelectionRequest\n");
		break;
	default:
		printf("recoit un evenement INCONU %d \n",e.type);
		break;
	} /* switch */

	printf("#############################################\n");
}
