/* return the number of byte read or 0 if probleme */

int McCheckCursorPos( unsigned char *buf, int len_buf, McRtpCursorPosDataStruct *cp, IPAddr ipfrom)
{
	unsigned int i;
	unsigned char * p = buf;

/*################## this code need to be revisited #### unuse padding*/
	if ( len_buf < (17+3) ){ 
		fprintf(stderr,"Error receiving CURSOR_POS: n = %d\n", len_buf);
		return 0;
	}

			/* T:2 P:1 X:1 CC:4 M:1 PT:7 */
	cp->rh_flags = (u_int16_t) (	((unsigned long) p[0] << 8 ) |
                                                ((unsigned long) p[1]      ) );

	if (cp->rh_flags != (u_int16_t) RTP_CONST_HPT_WEB){
		fprintf(stderr,"Error receiving CURSOR_POS: proto error\n");
		return 0;
	}
	cp->url_id =  (u_int32_t) (	((unsigned long) p[9] << 16)|
						((unsigned long) p[2] << 8) |
						((unsigned long) p[3]      ));
	cp->gmt_send_time=(u_int32_t)(     ((unsigned long) p[4] << 24) |
					        ((unsigned long) p[5] << 16) |
					        ((unsigned long) p[6] << 8 ) |
					        ((unsigned long) p[7]      ) );
	cp->ipaddr = 	ipfrom;

	cp->ssrc = (u_int8_t)	p[8];
	cp->pid =  (u_int16_t)(            ((unsigned long) p[10] << 8 ) |
					        ((unsigned long) p[11]      ) );
	cp->code = (u_int8_t)	p[12];

	cp->posx = (int16_t) (			((unsigned long) p[13] << 8) |
					        ((unsigned long) p[14] ) );
	cp->posy = (int16_t) (			((unsigned long) p[15] << 8) |
					        ((unsigned long) p[16] ) );
 
/*################## this code need to be revisited #### unuse padding*/
	return 17 +3;
}

/* return the number of byte read or 0 if probleme */

void McSendRtpCursorPos( unsigned char code, unsigned short pid, 
	unsigned int url_id, unsigned int gmt_send_time,
	int x, int y)
{
	unsigned int len_buf;

	emit_buf[0] = (RTP_CONST_HPT_WEB >> 8) & 0xff;	/* web header*/
	emit_buf[1] = RTP_CONST_HPT_WEB & 0xff;

	emit_buf[9] = (url_id >> 16) & 0xff;		/* url_id */
	emit_buf[2] = (url_id >> 8) & 0xff;
	emit_buf[3] =  url_id & 0xff;

	emit_buf[4] =  (gmt_send_time >> 24) & 0xff;    /* MSB gmt_send_time */
	emit_buf[5] = (gmt_send_time >> 16) & 0xff;
	emit_buf[6] = (gmt_send_time >> 8) & 0xff;
	emit_buf[7] =  gmt_send_time & 0xff;

	emit_buf[8] = 0x01;

	emit_buf[10] = (pid >> 8) & 0xff; 	/* MSB pid */
	emit_buf[11] = pid & 0xff;

	emit_buf[12] = code ;			/* code */

	emit_buf[13] = (x >> 8) & 0xff; 
	emit_buf[14] = x & 0xff;
	emit_buf[15] = (y >> 8) & 0xff; 
	emit_buf[16] = y & 0xff;

/*################## this code need to be revisited #### unuse padding*/
	emit_buf[17] = emit_buf[18] = emit_buf[19] =0;
	len_buf = 17 + 3;
        McSendData(emit_buf, len_buf);
}
